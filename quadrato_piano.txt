Si scriva un predicato:
quadratoInUnPianoFattoDi(A,LunghezzaLato,Piano).
che sia vero se:
1) Piano rappresenta una superficie Piana 10 x 5 attraverso una lista di 10 liste (le righe) di 5 elementi,
2) Piano contiene un quadrato di simboli A di lato LarghezzaLato.
Si semplifichi considerando che LunghezzaLato può essere 1, 2 oppure 3.
Il predicato è vero se:
A = a2
Lunghezza = 3
Piano = [[a1,a1,a1,a4,a4],
[a1,a1,a1,a4,a4],
[a1,a1,a1,a10,a8],
[a5,a5,a2,a2,a2],
[a5,a5,a2,a2,a2],
[a6,a6,a2,a2,a2],
[a6,a6,a3,a3,a3],
[a7,a7,a3,a3,a3],
[a7,a7,a3,a3,a3],
[a15,a16,a16,a16,a9]



----------------------------------------------------------------------------------
quadratoInUnPianoFattoDi(A, LunghezzaLato, Piano):-
    is_piano(Piano),
    raccogli_righe_con_sequenza(Piano, A, LunghezzaLato, 1, RigheConSeq),
    write(RigheConSeq), nl,
    ha_quadrato(RigheConSeq, LunghezzaLato, LunghezzaLato).

ha_quadrato(_, _, 1).
ha_quadrato([(_, Init1, Index), (L2, Init2, Index)|REST], Len, Count):- 
    Init2 is Init1 + 1, % sono due righe adiacenti
    CountMinus1 is Count - 1,
    ha_quadrato([(L2, Init2, Index)|REST], Len, CountMinus1).

ha_quadrato([(_, Init1, Index), (L2, Init2, Index)|REST], Len, _):- 
    not(Init1 is Init2 - 1),
    ha_quadrato([(L2, Init2, Index)|REST], Len, Len).

ha_quadrato([(_, _, Index1), (L2, _, Index2)|REST], Len, _):- 
    not(Index1 is Index2),
    ha_quadrato([(L2, _, Index2)|REST], Len, Len).
     


% raccogli_righe_con_sequenza(ListaListe, A, N, Init, Raccolta): true se Raccolta contiene tutte le liste in ListaListe che hanno una sequenza di N volte A, per ogni lista raccolta si tiene l'indice della riga 
raccogli_righe_con_sequenza([], _, _, _,[]).
raccogli_righe_con_sequenza([R1|REST], A, Lung, Init, [(R1, IndexRiga, InitIndex)|AltreRigheDaAggiungere]):-
    list_has_sequence(R1, A, Lung, InitIndex),
    IndexRiga is Init,
    InitPlus1 is Init + 1,
    raccogli_righe_con_sequenza(REST, A, Lung, InitPlus1, AltreRigheDaAggiungere),
    !.
raccogli_righe_con_sequenza([R1|REST], A, Lung, Init, AltreRigheDaAggiungere):-
    \+ list_has_sequence(R1, A, Lung, _),
    InitPlus1 is Init + 1,
    raccogli_righe_con_sequenza(REST, A, Lung, InitPlus1, AltreRigheDaAggiungere).
    
    

list_has_sequence(L, X, N,INIT):-
    make_list(X, N, LX),
    subset_with_index(L, LX, 1, INIT).
    
make_list(_, 0, []).
make_list(X, N, [X|T]):-
    M is N - 1,
    make_list(X, M, T),
    !.
    
subset_with_index([], [], _, _).
subset_with_index([H|Tail], [H|NTail], Init, Index):-
    Index is Init,
    subset_with_index(Tail, NTail, Init, Index).

subset_with_index([_|Tail], NTail, Init, Index):-
       InitPlus1 is Init + 1,
       subset_with_index(Tail, NTail, InitPlus1, Index).    




is_piano([R1, R2, R3, R4, R5, R6, R7, R8, R9, R10]):-
    length(R1, 5),
    length(R2, 5),
    length(R3, 5),
    length(R4, 5),
    length(R5, 5),
    length(R6, 5),
    length(R7, 5),
    length(R8, 5),
    length(R9, 5),
    length(R10, 5).

% query: quadratoInUnPianoFattoDi(a6, 2, [[a1,a1,a1,a4,a4],
[a1,a1,a1,a4,a4],
[a1,a1,a1,a10,a8],
[a5,a5,a2,a2,a2],
[a5,a5,a2,a2,a2],
[a6,a6,a6,a2,a2],
[a6,a6,a6,a3,a3],
[a7,a7,a3,a3,a3],
[a7,a7,a3,a3,a3],
[a15,a16,a16,a16,a9]])