% elem_swapped(L1, L2, Index1, Index2, Elem1, Elem2, Distanca): true if L2 is L1 with Elem1 and Elem2 swapped at index Index1 and Index2 at distance Distance
elem_swapped([X], [X], 1, 1, X, X, 0).
elem_swapped(L1, L2, Elem1, Elem2, Index1, Index2, Dist):-
    length(L1, Len),
    length(L2, Len),
    count_diff_with_indexes(L1, L2, 2, [Index1, Index2], 1), % there must be difference of 2
   
    %ToDo: L2 is L1 with elements at indexes I1 and I2 swapped
    kth_elem(Index1, L1, Elem1),
    kth_elem(Index2, L2, Elem1), % element at Index1 in L1 is the same as the element at Index2 in L2
   
    kth_elem(Index2, L1, Elem2),
    kth_elem(Index1, L2, Elem2),
    Dist is abs(Index1 - Index2).
   
%count_diff_with_indexes([L1, L2, Count, Indexes, 1): true if L1 and L2 have difference in Count elements and the differing elements are at indexes in "Indexes"

count_diff_with_indexes([], [], 0, [], _).
count_diff_with_indexes([H|T1], [H|T2], Count, Indexes, CurrentIndex):-
    CurrentIndexPlus1 is CurrentIndex + 1,
    count_diff_with_indexes(T1, T2, Count, Indexes, CurrentIndexPlus1).
count_diff_with_indexes([X|T1], [Y|T2], Count, [CurrentIndex|RestIndexes], CurrentIndex):-
    X \= Y,
    CurrentIndexPlus1 is CurrentIndex + 1,
    count_diff_with_indexes(T1, T2, CountMinus1, RestIndexes, CurrentIndexPlus1),
    Count is CountMinus1 + 1.

/* kth(K, L, X) restituisce true se il k-esimo elemento di L Ã¨ X*/
kth_elem(-1, [], _).
kth_elem(1, [X|_], X).
kth_elem(K, [_|L], X):-
    !,
    kth_elem(M, L, X),
    K is M + 1,
    K > 1.